本库只支持Windows32平台。
本库内目录结构不允许被修改。

附加知识：
一、综述
           WAVE文件作为多媒体中使用的声波文件格式之一，它是以RIFF格式为标准的。
RIFF是英文Resource Interchange File Format的缩写，每个WAVE文件的头四个
字节便是“RIFF”。
           WAVE文件是由若干个Chunk组成的。按照在文件中的出现位置包括：RIFF WAVE
Chunk, Format Chunk, Fact Chunk(可选), Data Chunk。具体见下图：

------------------------------------------------
|                    RIFF WAVE Chunk                  
|                    ID         = 'RIFF'                    
|                    RiffType = 'WAVE'               
------------------------------------------------
|                    Format Chunk                      
|                    ID = 'fmt '                      
------------------------------------------------
|                    Fact Chunk(optional)             
|                    ID = 'fact'                      
------------------------------------------------
|                    Data Chunk                        
|                    ID = 'data'                       
------------------------------------------------
                   图1          Wav格式包含Chunk示例

           其中除了Fact Chunk外，其他三个Chunk是必须的。每个Chunk有各自的ID，位
于Chunk最开始位置，作为标示，而且均为4个字节。并且紧跟在ID后面的是Chunk大
小（去除ID和Size所占的字节数后剩下的其他字节数目），4个字节表示，低字节
表示数值低位，高字节表示数值高位。下面具体介绍各个Chunk内容。
PS：
           所有数值表示均为低字节表示低位，高字节表示高位。

二、格式详解

1, RIFF WAVE Chunk
           ========================
           |              |所占字节数|         具体内容    
           ========================
           | ID           |         4 Bytes |          'RIFF'    
           ----------------------------------
           | Size         |         4 Bytes |             
           ----------------------------------
           | Type         |         4 Bytes |          'WAVE'    
           ----------------------------------
                   图2         RIFF WAVE Chunk

           以'FIFF'作为标示，然后紧跟着为size字段，该size是整个wav文件大小减去ID
和Size所占用的字节数，即FileLen - 8 = Size。然后是Type字段，为'WAVE'，表
示是wav文件。
           结构定义如下：
struct RIFF_HEADER
{
         char szRiffID[4];         // 'R','I','F','F'
         DWORD dwRiffSize;
         char szRiffFormat[4]; // 'W','A','V','E'
};


2, Format Chunk
           ========================================================
           |                      |          字节数         |                     具体内容                 
           ========================================================
           | ID                   |         4 Bytes         |          'fmt '                              
           ----------------------------------------------------------------------------------------
           | Size                 |         4 Bytes         | 数值为16或18，18则最后又附加信息      
           -------------------------------------------------------------------- ------------------ 
           | FormatTag            |         2 Bytes         | 编码方式，一般为0x0001                   
           ---------------------------------------------------------------------------------------  
           | Channels             |         2 Bytes         | 声道数目，1--单声道；2--双声道          
           --------------------------------------------------------------------------------------   
           | SamplesPerSec |         4 Bytes         | 采样频率                                  
           ----------------------------------------------------------------------------------------    
           | AvgBytesPerSec|         4 Bytes         | 音频数据传送速率,         其值为声道数×每秒
            数据位数×每样本的数据位数/8。播放软件利用此值可以估计缓冲区的大小   
           ------------------------------------------------------------------------------------------  
           | BlockAlign           |         2 Bytes         | 数据块对齐单位(每个采样需要的字节数) 
             其值为声道数×每样本的数据位值/8             
           ------------------------------------------------------------------------------------------   
           | BitsPerSample |         2 Bytes         | 每个采样需要的bit数                       
           -------------------------------------------------------------------------------------------  
           |                      |         2 Bytes         | 附加信息（可选，通过Size来判断有无）     
           ------------------------------------------------------------------------------------------  
                                   图3         Format Chunk

           以'fmt '作为标示。一般情况下Size为16，此时最后附加信息没有；如果为18
则最后多了2个字节的附加信息。主要由一些软件制成的wav格式中含有该2个字节的
附加信息。

           结构定义如下：
struct WAVE_FORMAT
{
         WORD wFormatTag;
         WORD wChannels;
         DWORD dwSamplesPerSec;
         DWORD dwAvgBytesPerSec;
         WORD wBlockAlign;
         WORD wBitsPerSample;
};
struct FMT_BLOCK
{
         char         szFmtID[4]; // 'f','m','t',' '
         DWORD         dwFmtSize;
         WAVE_FORMAT wavFormat;
};


         3, Fact Chunk
           =========================
           |              |所占字节数|         具体内容          |
           =========================
           | ID           |         4 Bytes |          'fact'     
           ----------------------------------
           | Size         |         4 Bytes |          数值为4    
           ----------------------------------
           | data         |         4 Bytes |              
           ----------------------------------
                   图4         Fact Chunk

           Fact Chunk是可选字段，一般当wav文件由某些软件转化而成，则包含该Chunk。
           结构定义如下：
struct FACT_BLOCK
{
         char         szFactID[4]; // 'f','a','c','t'
         DWORD         dwFactSize;
};


4, Data Chunk
           =========================
           |              |所占字节数|         具体内容     
           =========================
           | ID           |         4 Bytes |          'data'     
           ----------------------------------
           | Size         |         4 Bytes |              
           ----------------------------------
           | data         |                 |              
           ----------------------------------
                    图5 Data Chunk

           Data Chunk是真正保存wav数据的地方，以'data'作为该Chunk的标示。然后是
数据的大小。紧接着就是wav数据。根据Format Chunk中的声道数以及采样bit数，
wav数据的bit位置可以分成以下几种形式：
           ----------------------------------------------------------------------------------------------------------------------
           |          单声道     |           取样1           |           取样2           |           取样3           |           取样4     
           |                         ----------------------------------------------------------------------------------------------------
           |         8bit量化 |           声道0           |           声道0           |           声道0           |           声道0     
           -----------------------------------------------------------------------------------------------------------------------
           |          双声道      |                 取样1                             |                  取样2            
           |                         ----------------------------------------------------------------------------------------------------
           |         8bit量化 |         声道0(左)         |         声道1(右)         |         声道0(左)         |         声道1(右)   
           -----------------------------------------------------------------------------------------------------------------------
           |                        |                 取样1                               |                      取样2             
           |          单声道           ---------------------------------------------------------------------------------------------------
           |       16bit量化    |           声道0           |         声道0             |           声道0           |         声道0       
           |                        | (低位字节)         | (高位字节)         | (低位字节)         | (高位字节)   
           ------------------------------------------------------------------------------------------------------------------------
           |                         |                                                取样1                               
           |          双声道      -- ---------------------------------------------------------------------------------------------------
           |       16bit量化     声道0(左)         |         声道0(左)         |         声道1(右)         |         声道1(右)   
           |                            (低位字节)     |      (高位字节)          | (低位字节)            | (高位字节)   
           ------------------------------------------------------------------------------------------------------------------------
                                图6 wav数据bit位置安排方式

           Data Chunk头结构定义如下：
           struct DATA_BLOCK
{
         char szDataID[4]; // 'd','a','t','a'
         DWORD dwDataSize;
};

